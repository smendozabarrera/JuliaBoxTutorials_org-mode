#+TITLE:         Data Structures
#+AUTHOR:        Juliabox team
#+DRAWERS:       sfmb
#+EMAIL:         s.f.m@ieee.org
#+DATE:          08/09/2018
#+DESCRIPTION:   Julia Language tutorials and testing
#+KEYWORDS:      julia, data science, emacs, ESS, org-mode, development
#+LANGUAGE:      en
#+OPTIONS:       H:10 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t d:HIDDEN
#+OPTIONS:       TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:       LaTeX:dvipng
#+INFOJS_OPT:    view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="dft.css"/>

#+LaTeX_CLASS: IEEEtran
#+LATEX_CLASS_OPTIONS: [letterpaper, 9pt, twoside, compsoc, final]
#+LATEX_HEADER: \usepackage[USenglish]{babel}
#+LATEX_HEADER: \hyphenation{do-cu-ment}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{makeidx}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[ttdefault=true]{AnonymousPro}
#+LATEX_HEADER: \renewcommand*\familydefault{\ttdefault} %% Only if the base font of the document is to be typewriter style
#+LATEX_HEADER: \usepackage[libertine,bigdelims]{newtxmath}
#+LATEX_HEADER: \usepackage[cal=boondoxo,bb=boondox,frak=boondox]{mathalfa}
#+LATEX_HEADER: \useosf % change normal text to use proportional oldstyle figures

#+LATEX_HEADER: \markboth{Data Structures}%
#+LATEX_HEADER: {Bizland HUB}
#+LATEX_HEADER: \newcommand{\degC}{$^\circ$C{}}

#+STYLE: <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>

# -*- mode: org; -*-
#+OPTIONS:   toc:2
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+BEGIN_ABSTRACT
Data Structures.

*Mon Sep 10 06:36:18 CDT 2018*.
#+END_ABSTRACT

* Data structures
  :PROPERTIES:
  :CUSTOM_ID: data-structures
  :END:

Once we start working with many pieces of data at once, it will be
convenient for us to store data in structures like arrays or
dictionaries (rather than just relying on variables).

Types of data structures covered:

1. Tuples
2. Dictionaries
3. Arrays

As an overview, tuples and arrays are both ordered sequences of
elements (so we can index into them). Dictionaries and arrays are both
mutable. We'll explain this more below!

** Tuples
   :PROPERTIES:
   :CUSTOM_ID: tuples
   :END:

We can create a tuple by enclosing an ordered collection of elements in
=( )=.

Syntax: =julia (item1, item2, ...)=

#+begin_src julia :session :results output :exports all
  myfavoriteanimals = ("penguins", "cats", "sugargliders")
#+end_src

#+RESULTS:
: ("penguins", "cats", "sugargliders")

We can index into this tuple,

#+begin_src julia :session :results output :exports all
  myfavoriteanimals[1]
#+end_src

#+RESULTS:
: "penguins"

but since tuples are immutable, we can't update it

#+begin_src julia :session :results output :exports all
  myfavoriteanimals[1] = "otters"
#+end_src

#+RESULTS:
: ERROR: MethodError: no method matching setindex!(::Tuple{String,String,String}, ::String, ::Int64)
: Stacktrace:
:  [1] top-level scope at none:0

What is a sugar glider, you ask? Let's download an image of one and look
at it!

#+begin_src julia :session :results output :exports all
  download("https://upload.wikimedia.org/wikipedia/commons/0/0d/Petaurus_breviceps-Cayley.jpg", "../../../graphs/sugar-glider.jpg")
#+end_src

#+RESULTS:
:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
:                                  Dload  Upload   Total   Spent    Left  Speed
:   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0100 17423  100 17423    0     0   8515      0  0:00:02  0:00:02 --:--:--  8515
: "../../../graphs/sugar-glider.jpg"

#+begin_src julia :session :results output :exports all
  load("../../../graphs/sugar-glider.jpg")
#+end_src

#+RESULTS:
: ERROR: UndefVarError: load not defined
: Stacktrace:
:  [1] top-level scope at none:0

Let's install the package

#+begin_src julia :session :results output :exports all
  using Pkg
  Pkg.add("Images")
  Pkg.add("ImageMagick")
#+end_src

#+RESULTS:
#+begin_example

  Updating registry at `~/.julia/registries/General`
  Updating git-repo `https://github.com/JuliaRegistries/General.git`
[?25l[2K[?25h Resolving package versions...
  Updating `~/.julia/environments/v1.0/Project.toml`
 [no changes]
  Updating `~/.julia/environments/v1.0/Manifest.toml`
 [no changes]
 Resolving package versions...
  Updating `~/.julia/environments/v1.0/Project.toml`
 [no changes]
  Updating `~/.julia/environments/v1.0/Manifest.toml`
 [no changes]
#+end_example

#+begin_src julia :session :results output :exports all
  # May take a little bit the first time
  using Images
  sugar_glider = load("../../../graphs/sugar-glider.jpg")
#+end_src

#+RESULTS:
#+begin_example


500Ã—396 Array{RGB{N0f8},2} with eltype RGB{Normed{UInt8,8}}:
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)        â€¦  RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(0.996,0.996,0.996)     RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(0.992,0.992,0.992)  RGB{N0f8}(0.992,0.992,0.992)     RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(0.988,0.988,0.988)  RGB{N0f8}(0.988,0.988,0.988)     RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(0.988,0.988,0.988)  RGB{N0f8}(0.988,0.988,0.988)     RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(0.992,0.992,0.992)  RGB{N0f8}(0.992,0.992,0.992)  â€¦  RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(0.996,0.996,0.996)     RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 â‹®                                                           â‹±                                â‹®
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)        â€¦  RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
 RGB{N0f8}(1.0,1.0,1.0)        RGB{N0f8}(1.0,1.0,1.0)           RGB{N0f8}(0.996,0.996,0.996)  RGB{N0f8}(0.996,0.996,0.996)
#+end_example

**** Coming in 1.0: NamedTuples
     :PROPERTIES:
     :CUSTOM_ID: coming-in-1.0-namedtuples
     :END:

In earlier versions of Julia, we had the option to work with
=NamedTuples= via a package. In 1.0, NamedTuples will be supported in
Base Julia. Therefore you'll be able to create data structures like the
following:

#+begin_src julia :session :results output :exports all
  myfavoriteanimals = (bird = "penguins", mammal = "cats", marsupial = "sugargliders")
#+end_src

#+RESULTS:
: (bird = "penguins", mammal = "cats", marsupial = "sugargliders")

Like regular =Tuples=, =NamedTuples= are ordered, so we can retrieve
their elements via indexing, such that

#+begin_src julia :session :results output :exports all
  myfavoriteanimals[1]
#+end_src

#+RESULTS:
: "penguins"

will return "penguins". However, we will now also be able to access
"penguins" by keyword, via

#+begin_src julia :session :results output :exports all
  myfavoriteanimals.bird
#+end_src

#+RESULTS:
: "penguins"

** Dictionaries
   :PROPERTIES:
   :CUSTOM_ID: dictionaries
   :END:

If we have sets of data related to one another, we may choose to store
that data in a dictionary. We can create a dictionary using the =Dict()=
function, which we can initialize as an empty dictionary or one storing
key, value pairs.

Syntax: =julia Dict(key1 => value1, key2 => value2, ...)=

A good example is a contacts list, where we associate names with phone
numbers.

#+begin_src julia :session :results output :exports all
  myphonebook = Dict(
      "Jenny" => "867-5309",
      "Ghostbusters" => "555-2368"
  )
#+end_src

#+RESULTS:
: Dict{String,String} with 2 entries:
:   "Jenny"        => "867-5309"
:   "Ghostbusters" => "555-2368"

In this example, each name and number is a "key" and "value" pair. We
can grab Jenny's number (a value) using the associated key

#+begin_src julia :session :results output :exports all
  myphonebook["Jenny"]
#+end_src

#+RESULTS:
: "867-5309"

We can add another entry to this dictionary as follows

#+begin_src julia :session :results output :exports all
  myphonebook["Kramer"] = "555-FILK"
#+end_src

#+RESULTS:
: "555-FILK"

Let's check what our phonebook looks like now...

#+begin_src julia :session :results output :exports all
  myphonebook
#+end_src

#+RESULTS:
: Dict{String,String} with 3 entries:
:   "Jenny"        => "867-5309"
:   "Kramer"       => "555-FILK"
:   "Ghostbusters" => "555-2368"

We can delete Kramer from our contact list - and simultaneously grab his
number - by using =pop!=

#+begin_src julia :session :results output :exports all
  pop!(myphonebook, "Kramer")
#+end_src

#+RESULTS:
: "555-FILK"

#+begin_src julia :session :results output :exports all
  myphonebook
#+end_src

#+RESULTS:
: Dict{String,String} with 2 entries:
:   "Jenny"        => "867-5309"
:   "Ghostbusters" => "555-2368"

Unlike tuples and arrays, dictionaries are not ordered. So, we can't
index into them.

#+begin_src julia :session :results output :exports all
  myphonebook[1]
#+end_src

#+RESULTS:
: ERROR: KeyError: key 1 not found
: Stacktrace:
:  [1] getindex(::Dict{String,String}, ::Int64) at ./dict.jl:478
:  [2] top-level scope at none:0

In the example above, =julia= thinks you're trying to access a value
associated with the key =1=.

** Arrays
   :PROPERTIES:
   :CUSTOM_ID: arrays
   :END:

Unlike tuples, arrays are mutable. Unlike dictionaries, arrays contain
ordered collections. We can create an array by enclosing this collection
in =[ ]=.

Syntax: =julia [item1, item2, ...]=

For example, we might create an array to keep track of my friends

#+begin_src julia :session :results output :exports all
  myfriends = ["Ted", "Robyn", "Barney", "Lily", "Marshall"]
#+end_src

#+RESULTS:
: 5-element Array{String,1}:
:  "Ted"
:  "Robyn"
:  "Barney"
:  "Lily"
:  "Marshall"

The =1= in =Array{String,1}= means this is a one dimensional vector. An
=Array{String,2}= would be a 2d matrix, etc. The =String= is the type of
each element.

or to store a sequence of numbers

#+begin_src julia :session :results output :exports all
  fibonacci = [1, 1, 2, 3, 5, 8, 13]
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13

#+begin_src julia :session :results output :exports all
  mixture = [1, 1, 2, 3, "Ted", "Robyn"]
#+end_src

#+RESULTS:
: 6-element Array{Any,1}:
:  1
:  1
:  2
:  3
:   "Ted"
:   "Robyn"

Once we have an array, we can grab individual pieces of data from inside
that array by indexing into the array. For example, if we want the third
friend listed in =myfriends=, we write

#+begin_src julia :session :results output :exports all
  myfriends[3]
#+end_src

#+RESULTS:
: "Barney"

We can use indexing to edit an existing element of an array

#+begin_src julia :session :results output :exports all
  myfriends

  println(":: Getting third element ::")
  myfriends[3] = "Baby Bop"
#+end_src

#+RESULTS:
: 5-element Array{String,1}:
:  "Ted"
:  "Robyn"
:  "Barney"
:  "Lily"
:  "Marshall"
:
: :: Getting third element ::
: "Baby Bop"

Yes, *Julia is 1-based indexing*, not 0-based like Python. Wars are
faught over lesser issues. I have a friend with the wisdom of Solomon
who proposes settling this once and for all with ~Â½~ :smiley:

We can also edit the array by using the =push!= and =pop!= functions.
=push!= adds an element to the end of an array and =pop!= removes the
last element of an array.

We can add another number to our fibonnaci sequence

#+begin_src julia :session :results output :exports all
  push!(fibonacci, 21)
#+end_src

#+RESULTS:
: 8-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13
:  21

and then remove it

#+begin_src julia :session :results output :exports all
  pop!(fibonacci)
#+end_src

#+RESULTS:
: 21

#+begin_src julia :session :results output :exports all
  fibonacci
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13

So far I've given examples of only 1D arrays of scalars, but arrays can
have an arbitrary number of dimensions and can also store other arrays.
For example, the following are arrays of arrays:

#+begin_src julia :session :results output :exports all
  favorites = [
      ["koobideh", "chocolate", "eggs"],
      ["penguins", "cats", "sugargliders"]
  ]
#+end_src

#+RESULTS:
: 2-element Array{Array{String,1},1}:
:  ["koobideh", "chocolate", "eggs"]
:  ["penguins", "cats", "sugargliders"]

#+begin_src julia :session :results output :exports all
  numbers = [
      [1, 2, 3],
      [4, 5],
      [6, 7, 8, 9]
  ]
#+end_src

#+RESULTS:
: 3-element Array{Array{Int64,1},1}:
:  [1, 2, 3]
:  [4, 5]
:  [6, 7, 8, 9]

Below are examples of 2D and 3D arrays populated with random values.

#+begin_src julia :session :results output :exports all
  rand(4, 3)
#+end_src

#+RESULTS:
: 4Ã—3 Array{Float64,2}:
:  0.175901  0.0182792  0.382218
:  0.346488  0.629005   0.733673
:  0.78154   0.671651   0.203042
:  0.115388  0.248774   0.887315

#+begin_src julia :session :results output :exports all
  rand(4, 3, 2)
#+end_src

#+RESULTS:
#+begin_example
4Ã—3Ã—2 Array{Float64,3}:
[:, :, 1] =
 0.916338  0.561598  0.827302
 0.530749  0.63366   0.959193
 0.244435  0.900316  0.339301
 0.567211  0.811524  0.253519

[:, :, 2] =
 0.952615  0.855504  0.956897
 0.938584  0.607085  0.879337
 0.368421  0.499222  0.915201
 0.653518  0.916502  0.0157947
#+end_example

Be careful when you want to copy arrays!

#+begin_src julia :session :results output :exports all
  fibonacci
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13

#+begin_src julia :session :results output :exports all
  somenumbers = fibonacci
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13

#+begin_src julia :session :results output :exports all
  somenumbers[1] = 404
#+end_src

#+RESULTS:
: 404

#+begin_src julia :session :results output :exports all
  fibonacci
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:  404
:    1
:    2
:    3
:    5
:    8
:   13

Editing =somenumbers= caused =fibonacci= to get updated as well!

In the above example, we didn't actually make a copy of =fibonacci=. We
just created a new way to access the entries in the array bound to
=fibonacci=.

If we'd like to make a copy of the array bound to =fibonacci=, we can
use the =copy= function.

#+begin_src julia :session :results output :exports all
  # First, restore fibonacci
  fibonacci[1] = 1
  fibonacci
#+end_src

#+RESULTS:
#+begin_example

1
7-element Array{Int64,1}:
  1
  1
  2
  3
  5
  8
 13
#+end_example

#+begin_src julia :session :results output :exports all
  somemorenumbers = copy(fibonacci)
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13

#+begin_src julia :session :results output :exports all
  somemorenumbers[1] = 404
#+end_src

#+RESULTS:
: 404

#+begin_src julia :session :results output :exports all
  fibonacci
#+end_src

#+RESULTS:
: 7-element Array{Int64,1}:
:   1
:   1
:   2
:   3
:   5
:   8
:  13

In this last example, fibonacci was not updated. Therefore we see that
the arrays bound to =somemorenumbers= and =fibonacci= are distinct.

** Exercises
    :PROPERTIES:
    :CUSTOM_ID: exercises
    :END:

*** Example 1
     :PROPERTIES:
     :CUSTOM_ID: section
     :END:

Create an array, =a_ray=, with the following code:

#+begin_src julia :session :results output :exports all
  a_ray = [1, 2, 3]
#+end_src

#+RESULTS:
: 3-element Array{Int64,1}:
:  1
:  2
:  3

Add the number =4= to the end of this array and then remove it.

#+begin_src julia :session :results output :exports all
  println(":: Add a number 4 at the end of the array ::")
  push!(a_ray, 4)
  a_ray

  println(":: Remove the last cell ::")
  pop!(a_ray)

  println(":: Show the array ::")
  a_ray
#+end_src

#+RESULTS:
#+begin_example
:: Add a number 4 at the end of the array ::
4-element Array{Int64,1}:
 1
 2
 3
 4
4-element Array{Int64,1}:
 1
 2
 3
 4

:: Remove the last cell ::
4

:: Show the array ::
3-element Array{Int64,1}:
 1
 2
 3
#+end_example

*** Example 2
     :PROPERTIES:
     :CUSTOM_ID: section-1
     :END:

Try to add "Emergency" as key to =myphonebook= with the value
=string(911)= with the following code

#+begin_src julia :session :results output :exports all
  myphonebook
  myphonebook["Emergency"] = 911
#+end_src

#+RESULTS:
#+begin_example
Dict{String,String} with 2 entries:
  "Jenny"        => "867-5309"
  "Ghostbusters" => "555-2368"
ERROR: MethodError: Cannot `convert` an object of type Int64 to an object of type String
Closest candidates are:
  convert(::Type{T<:AbstractString}, !Matched::T<:AbstractString) where T<:AbstractString at strings/basic.jl:207
  convert(::Type{T<:AbstractString}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:208
  convert(::Type{T}, !Matched::T) where T at essentials.jl:154
Stacktrace:
 [1] setindex!(::Dict{String,String}, ::Int64, ::String) at ./dict.jl:381
 [2] top-level scope at none:0
#+end_example

Why doesn't this work?

**** Answer error message

ERROR: MethodError: Cannot `convert` an object of type Int64 to an
object of type String

*** Example 3
     :PROPERTIES:
     :CUSTOM_ID: section-2
     :END:

Create a new dictionary called =flexible_phonebook= that has Jenny's
number stored as an integer and Ghostbusters' number stored as a string
with the following code

#+begin_src julia :session :results output :exports all
  flexible_phonebook = Dict(
      "Jenny" => 8675309,
      "Ghostbusters" => "555-2368"
  )
#+end_src

#+RESULTS:
: Dict{String,Any} with 2 entries:
:   "Jenny"        => 8675309
:   "Ghostbusters" => "555-2368"

*** Example 4
     :PROPERTIES:
     :CUSTOM_ID: section-3
     :END:

Add the key "Emergency" with the value =911= (an integer) to
=flexible_phonebook=.

#+begin_src julia :session :results output :exports all
  flexible_phonebook["Emergency"] = 911
  flexible_phonebook
#+end_src

#+RESULTS:
: 911
: Dict{String,Any} with 3 entries:
:   "Jenny"        => 8675309
:   "Emergency"    => 911
:   "Ghostbusters" => "555-2368"

*** Example 5
     :PROPERTIES:
     :CUSTOM_ID: section-4
     :END:

Why can we add an integer as a value to =flexible_phonebook= but not
=myphonebook=? How could we have initialized =myphonebook= so that it
would accept integers as values?

**** Answer

Because ~Julia~ is strongly typed syntax:

~Dict{String,Any}~

/EOF/
