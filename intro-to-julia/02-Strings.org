#+TITLE:         Strings in Julia
#+AUTHOR:        Juliabox team
#+DRAWERS:       sfmb
#+EMAIL:         s.f.m@ieee.org
#+DATE:          08/09/2018
#+DESCRIPTION:   Julia Language tutorials and testing
#+KEYWORDS:      julia, data science, emacs, ESS, org-mode, development
#+LANGUAGE:      en
#+OPTIONS:       H:10 num:t toc:nil \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t d:HIDDEN
#+OPTIONS:       TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:       LaTeX:dvipng
#+INFOJS_OPT:    view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE: <link rel="stylesheet" type="text/css" href="dft.css"/>

#+LaTeX_CLASS: IEEEtran
#+LATEX_CLASS_OPTIONS: [letterpaper, 9pt, twoside, compsoc, final]
#+LATEX_HEADER: \usepackage[USenglish]{babel}
#+LATEX_HEADER: \hyphenation{do-cu-ment}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{makeidx}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[ttdefault=true]{AnonymousPro}
#+LATEX_HEADER: \renewcommand*\familydefault{\ttdefault} %% Only if the base font of the document is to be typewriter style
#+LATEX_HEADER: \usepackage[libertine,bigdelims]{newtxmath}
#+LATEX_HEADER: \usepackage[cal=boondoxo,bb=boondox,frak=boondox]{mathalfa}
#+LATEX_HEADER: \useosf % change normal text to use proportional oldstyle figures

#+LATEX_HEADER: \markboth{Strings in Julia}%
#+LATEX_HEADER: {Bizland HUB}
#+LATEX_HEADER: \newcommand{\degC}{$^\circ$C{}}

#+STYLE: <script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"> </script>

# -*- mode: org; -*-
#+OPTIONS:   toc:2
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+BEGIN_ABSTRACT
Strings in Julia.

*Sat Sep  8 18:32:32 CDT 2018*.
#+END_ABSTRACT

* Strings
  :PROPERTIES:
  :CUSTOM_ID: strings
  :END:

*Topics*:

1. How to get a string
2. String interpolation
3. String concatenation

** How to get a string
   :PROPERTIES:
   :CUSTOM_ID: how-to-get-a-string
   :END:

Enclose your characters in ~" "~ or ~""" """~!

#+begin_src julia :session :results output :exports all
  s1 = "I am a string."
#+end_src

#+RESULTS:
: "I am a string."

#+begin_src julia :session :results output :exports all
  s2 = """I am also a string. """
#+end_src

#+RESULTS:
: "I am also a string. "

There are a couple functional differences between strings enclosed in
single and triple quotes. One difference is that, in the latter case,
you can use quotation marks within your string.

#+begin_src julia :session :results output :exports all
  "Here, we get an "error" because it's ambiguous where this string ends "
#+end_src

#+RESULTS:
: ERROR: syntax: cannot juxtapose string literal

#+begin_src julia :session :results output :exports all
  """Look, Mom, no "errors"!!! """
#+end_src

#+RESULTS:
: "Look, Mom, no \"errors\"!!! "

Note that ~' '~ define a character, but NOT a string!

#+begin_src julia :session :results output :exports all
  typeof('a')
#+end_src

#+RESULTS:
: Char

#+begin_src julia :session :results output :exports all
  'We will get an error here'
#+end_src

#+RESULTS:
: ERROR: syntax: invalid character literal

** String interpolation
   :PROPERTIES:
   :CUSTOM_ID: string-interpolation
   :END:

We can use the ~$~ sign to insert existing variables into a string and to
evaluate expressions within a string. Below is an example that contains
some highly sensitive personal information.

#+begin_src julia :session :results output :exports all
  name = "Jane"
  num_fingers = 10
  num_toes = 10
#+end_src

#+RESULTS:
: "Jane"
: 10
: 10

#+begin_src julia :session :results output :exports all
  println("Hello, my name is $name.")
  println("I have $num_fingers fingers and $num_toes toes.")
#+end_src

#+RESULTS:
: Hello, my name is Jane.
: I have 10 fingers and 10 toes.

#+begin_src julia :session :results output :exports all
  println("That is $(num_fingers + num_toes) digits in all!!")
#+end_src

#+RESULTS:
: That is 20 digits in all!!

** String concatenation
   :PROPERTIES:
   :CUSTOM_ID: string-concatenation
   :END:

Below are three ways we can concatenate strings! The first way is to use
the =string()= function. =string()= converts non-string inputs to
strings.

#+begin_src julia :session :results output :exports all
  s3 = "How many cats ";
  s4 = "is too many cats?";
  ðŸ˜º = 10
#+end_src

#+RESULTS:
:
:
: 10

#+begin_src julia :session :results output :exports all
  string(s3, s4)
#+end_src

#+RESULTS:
: "How many cats is too many cats?"

#+begin_src julia :session :results output :exports all
  string("I don't know, but ", ðŸ˜º, " is too few.")
#+end_src

#+RESULTS:
: "I don't know, but 10 is too few."

We can also use =*= for concatenation!

#+begin_src julia :session :results output :exports all
  s3 * s4
#+end_src

#+RESULTS:
: "How many cats is too many cats?"

*** Exercises
    :PROPERTIES:
    :CUSTOM_ID: exercises
    :END:

**** Exercise 1
     :PROPERTIES:
     :CUSTOM_ID: section
     :END:

Create a string that says "hi" 1000 times, first with =repeat= and then
with the exponentiation operator, which can call =*= under the hood.

***** From the [[https://docs.julialang.org/en/v1/base/strings/#Base.repeat-Tuple{AbstractString,Integer}][documentation]]

#+begin_src julia :session :results output :exports all
  n = 10
  repeat("hi", n)
#+end_src

#+RESULTS:
: 10
: "hihihihihihihihihihi"

#+begin_src julia :session :results output :exports all
  "hi"^n
#+end_src

#+RESULTS:
: "hihihihihihihihihihi"

**** Exercise 2
     :PROPERTIES:
     :CUSTOM_ID: section-1
     :END:

Declare two variables

#+begin_src julia :session :results output :exports all
  a = 3
  b = 4
#+end_src

#+RESULTS:
: 3
: 4

and use them to create two strings:

#+begin_src julia :session :results output :exports all
  string(a, " + ", b)
  string(a + b)
#+end_src

#+RESULTS:
: "3 + 4"
: "7"

/EOF/
